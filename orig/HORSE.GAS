
	Base equ $f00000

		INCLUDE	"blit.inc"	; blitter defintions
		INCLUDE	"jaguar.inc"	; Jaguar General definitions

	gpu_mode EQU (G_RAM+$ffc)	; Number defines which routine the GPU will do
	gpu_screen EQU (G_RAM+$ff8)	; The address of the screen the GPU will draw on
	source_flags	EQU (G_RAM+$ff4)
	dest_flags EQU (G_RAM+$ff0)	; Blitter flags 4 source+dest
	backg	EQU (G_RAM+$fec)

	sysflags EQU (G_RAM+$fd0)
	xcent	EQU (G_RAM+$efc)
	ycent	EQU (G_RAM+$ef8)


	p_sines EQU $30000		; 256-byte sine table of unsigned bytes
	in_buf	EQU (G_RAM+$f60)	; General space for passing stuff to GPU
	ORG $f03000
	width EQU 384
	mwidth EQU 768
	height EQU 240
	diag EQU $4000

;***** EQUATES for Blitter offsets

	_base EQU 0
	_flags EQU 1
	_clip EQU 2
	_mask EQU 2
	_pixel EQU 3 
	_step EQU 4
	_fstep EQU 5
	_fpixel EQU 6
	_inc EQU 7
	_finc EQU 8

	MACRO sdiv	;Divide, keeping sign of that which is divided, uses r27
	move @2,r31
	abs @2
 	div @1,@2
	btst #31,r31	;Get sign bit of original thang
	jr z,sd@@
	nop
	neg @2
sd@@:	
	ENDM

	MACRO sdiv0	;Divide, keeping sign of that which is divided, uses r2-r3
	move @2,r0
	abs @2
 	div @1,@2
	btst #31,r0	;Get sign bit of original thang
	jr z,sd0@@
	nop
	neg @2
sd0@@:	
	ENDM


	MACRO waitblit	; Wait for the Blitter to stop
wai@@:	load (blit),r31
	btst #0,r31
	jr z,wai@@
	nop
	ENDM

	MACRO fmult	;multiply 2 thangs, uses r2-r4, returns in first reg.
	moveta @2,r31	;(preserves second Thang)
 	moveq #0,r27
	move r27,r28
	abs @1
	addc r28,r27
	abs @2
	addc r28,r27
	move @2,r28
	mult @1,r28
	move @1,r29
	shrq #16,r28
	shrq #16,r29
	mult @2,r29
	shrq #16,@2
	add r29,r28
	move @2,r29
	mult @1,r29
	shrq #16,@1
	add r29,r28
	mult @2,@1
	shlq #16,@1
	add r28,@1
	btst #0,r27
	jr z,fmp@@
	movefa r31,@2
	neg @1
fmp@@:
	ENDM

	MACRO bank0
	movei #G_FLAGS,r0
	load (r0),r1
	bclr #14,r1
	store r1,(r0)			;Switch to Register Bank #0
	nop
	nop
	nop
	nop
	nop
bnk0@@:	movei #G_FLAGS,r0
	load (r0),r1
	btst #14,r1
	jr nz,bnk0@@
	nop
	ENDM

	MACRO bank1
	movei #G_FLAGS,r0
	load (r0),r1
	bset #14,r1
	store r1,(r0)			;Switch to Register Bank #1
	nop
	nop
	nop
	nop
	nop
bnk1@@:	movei #G_FLAGS,r0
	load (r0),r1
	btst #14,r1
	jr z,bnk1@@
	nop
	ENDM

	MACRO swap
	move @1,r31
	move @2,@1
	move r31,@2
	ENDM

	movei #B_CMD,r0
waifer:	load (r0),r31
	btst #0,r31
	jr z,waifer
	nop

	movei #gpu_mode,r0
	movei #pring2,r1
	movei #psphere,r2
	load (r0),r31
	cmpq #1,r31
	jump eq,(r1)
	nop
	cmpq #2,r31
	jump eq,(r2)
	nop



;*****
;*
;* POLYO2D:  Draw 2D object made of polygons, positioned in Tempest 3D space (extended version with clipping)
;*
;* Inputs: IN_BUF+0=Pointer to poly object data structure
;* 	   +4=X +8=Y +12=Z, Tempest world co-ordinates
;*	   +16=X centre; +20=Y centre, as 16:16 fractions; +24=XY Rotation Angle
;*
;*****
	
	x1		REGEQU r3	
	y1		REGEQU r4
	x2		REGEQU r5
	y2		REGEQU r6
	x3		REGEQU r7
	y3		REGEQU r8
	i1		REGEQU r9
	i2 		REGEQU r10
	i3		REGEQU r11
	xinc1		REGEQU r12
	iinc1		REGEQU r15
	xinc2		REGEQU r16
	iinc2		REGEQU r17
	count1		REGEQU r18
	count2		REGEQU r19
	loop1		REGEQU r20
	loop2		REGEQU r21
	count3		REGEQU r22
	sum1		REGEQU r23
	sum2		REGEQU r24
	sum3		REGEQU r25
	sum4		REGEQU r26

	xstart 		REGEQU r27
	istart		REGEQU r28
	xsize		REGEQU r29
	isize		REGEQU r30
	cmd		REGEQU r2


	blit		REGEQU r13
	a1		REGEQU r14

;*	Definitions for use in the alternate-register bank. Alternate r0 and ISTART are used in the polyrenderer.

	sinebase	REGEQU r23
	polypointer	REGEQU r24
	xxx		REGEQU r25
	yyy 		REGEQU r26
	zzz		REGEQU r12
	xcen		REGEQU r13
	ycen		REGEQU r14
	faces		REGEQU r15
	sin		REGEQU r16
	cos		REGEQU r17
	byte		REGEQU r18
	vertices	REGEQU r19
	poly_loop	REGEQU r20
	colour		REGEQU r21
	vertex		REGEQU r22

polyo2d:
	bank0

	movei #A1_BASE,a1	;blitter Base
	movei #B_CMD,blit	;blitter flags/go
	movei #(PATDSEL|CLIP_A1|GOURD),cmd	;blitter Go command
	waitblit			;make sure it's stopped
	movei #gpu_screen,r0
	load (r0),r1
	store r1,(a1+_base)	;screen destination base address set
	movei #$1180180,r0
	nop
	store r0,(a1+_clip)	;clip window dimensions
	nop


	bank1

 	movei #in_buf,r0
	load (r0),polypointer		;Get poly stuff
	addq #4,r0
	load (r0),xxx
	addq #4,r0
	load (r0),yyy
	addq #4,r0
	load (r0),zzz
	addq #4,r0
	load (r0),xcen
	addq #4,r0
	load (r0),ycen
	addq #4,r0
	load (r0),r1			;this is the rotation angle

	movei #$ff,byte
	move r1,r0
	movei #p_sines,sinebase		;initialise some constants

	movei #$40,r2
	and byte,r0
	add r2,r1
	add sinebase,r0
	and byte,r1
	loadb (r0),sin
	add sinebase,r1
	movei #$80,r0
	loadb (r1),cos			;get sine and cosine values
	sub r0,sin
	sub r0,cos			;make them signed


	load (polypointer),faces	;get # of faces
	addq #4,polypointer

	move faces,vertices
	shlq #4,vertices
	add polypointer,vertices	;16*faces plus address is v-table
	movei #polyloop,poly_loop
	shrq #14,zzz			;scale z properly

polyloop: nop
 	loadw (polypointer),colour	;get colour of this face
	move colour,r1
	add r1,r1
	nop
	addq #2,polypointer
	movei #$4008,r0

	loadw (polypointer),vertex	;Inline code for each vertex: get vertex index
	move vertex,r1
	add r1,r1
	nop
	addq #2,polypointer
	loadw (polypointer),i1		;got Intensity
	move i1,r1
	add r1,r1
	addq #2,polypointer
	shlq #2,vertex			;vertex thang to long pointer
	moveta i1,i1			;set intensity in alt for polyrenderer		*****
	add vertices,vertex		;point to this vertex
	loadw (vertex),x1
	addq #2,vertex
	loadw (vertex),y1		;got vertex XY position


	shlq #16,x1
	shlq #16,y1
	sharq #16,x1
	sharq #16,y1			;sign-extend the XY position

	sub xcen,x1
	sub ycen,y1			;move to local centre
	move x1,x2
	move y1,y2			;copy them for rotation
	neg y1				;y1 will be the -SIN term in the rotation so negate it
	imult cos,x1
	imult sin,y1
	imult sin,x2
	imult cos,y2			;do the rotation-multiplies
	add y1,x1
	add x2,y2			;add the products, resultant rotated point is (x1,y2)
	shlq #8,x1
	shlq #8,y2			;rotated point to 16:16
	add xxx,x1
	add yyy,y2			;move to final XY in Tempest space
	sdiv zzz,x1
	sdiv zzz,y2			;perspective transform
	sharq #7,x1
	sharq #7,y2
	movei #ycent,vertex
	load (vertex),r1
	addq #4,vertex
	load (vertex),r0

;	movei #192,r0
;	movei #120,r1
	add r0,x1			;final x1
	add r1,y2			;final y1
	moveta x1,x1			;						*****
	moveta y2,y1			;Set up in alternates for the polyrenderer	*****	

	loadw (polypointer),vertex	;Inline code for each vertex: get vertex index
	move vertex,r1
	addq #2,polypointer
	add r1,r1
	
	loadw (polypointer),i1		;got Intensity
	move i1,r1
	add r1,r1
	addq #2,polypointer
	shlq #2,vertex			;vertex thang to long pointer
	moveta i1,i2			;set intensity in alt for polyrenderer		*****
	add vertices,vertex		;point to this vertex
	loadw (vertex),x1
	addq #2,vertex
	loadw (vertex),y1		;got vertex XY position
	shlq #16,x1
	shlq #16,y1
	sharq #16,x1
	sharq #16,y1			;sign-extend the XY position
	sub xcen,x1
	sub ycen,y1			;move to local centre
	move x1,x2
	move y1,y2			;copy them for rotation
	neg y1				;y1 will be the -SIN term in the rotation so negate it
	imult cos,x1
	imult sin,y1
	imult sin,x2
	imult cos,y2			;do the rotation-multiplies
	add y1,x1
	add x2,y2			;add the products, resultant rotated point is (x1,y2)
	shlq #8,x1
	shlq #8,y2			;rotated point to 16:16
	add xxx,x1
	add yyy,y2			;move to final XY in Tempest space
	sdiv zzz,x1
	sdiv zzz,y2			;perspective transform
	sharq #7,x1
	sharq #7,y2
	movei #ycent,vertex
	load (vertex),r1
	addq #4,vertex
	load (vertex),r0
;	movei #192,r0
;	movei #120,r1
	add r0,x1			;final x1
	add r1,y2			;final y1
	moveta x1,x2			;						*****
	moveta y2,y2			;Set up in alternates for the polyrenderer	*****	

	loadw (polypointer),vertex	;Inline code for each vertex: get vertex index
	move vertex,r1
	addq #2,polypointer
	add r1,r1
	loadw (polypointer),i1		;got Intensity
	move i1,r1
	add r1,r1
	addq #4,polypointer
	shlq #2,vertex			;vertex thang to long pointer
	moveta i1,i3			;set intensity in alt for polyrenderer		*****
	add vertices,vertex		;point to this vertex
	loadw (vertex),x1
	addq #2,vertex
	loadw (vertex),y1		;got vertex XY position
	shlq #16,x1
	shlq #16,y1
	sharq #16,x1
	sharq #16,y1			;sign-extend the XY position
	sub xcen,x1
	sub ycen,y1			;move to local centre
	move x1,x2
	move y1,y2			;copy them for rotation
	neg y1				;y1 will be the -SIN term in the rotation so negate it
	imult cos,x1
	imult sin,y1
	imult sin,x2
	imult cos,y2			;do the rotation-multiplies
	add y1,x1
	add x2,y2			;add the products, resultant rotated point is (x1,y2)
	shlq #8,x1
	shlq #8,y2			;rotated point to 16:16
	add xxx,x1
	add yyy,y2			;move to final XY in Tempest space
	sdiv zzz,x1
	sdiv zzz,y2			;perspective transform
	sharq #7,x1
	sharq #7,y2
	movei #ycent,vertex
	load (vertex),r1
	addq #4,vertex
	load (vertex),r0
;	movei #192,r0
;	movei #120,r1
	add r0,x1			;final x1
	add r1,y2			;final y1
	moveta x1,x3			;						*****
	moveta y2,y3			;Set up in alternates for the polyrenderer	*****	

;* Now everything is set up, time to render the poly.


	bank0

;*******
;******* polyrenderer code start
;*******



	shlq #8,i1			;This is the polyrenderer, same as POLY above
	shlq #8,i2
	shlq #8,i3		;intensity values to 24-Bit

	

	cmp y1,y2		;Get vertices in order: (x1,y1)=TOP (lowest y) ---> (x3,y3)=BOTTOM
	jr pl,i_nswap1		;No nop after, as first bit of the macro only bashes r31
	swap x1,x2
	swap y1,y2
	swap i1,i2
i_nswap1: cmp y1,y3
	jr pl,i_nswap2
	swap x1,x3
	swap y1,y3
	swap i1,i3		;Now, (x1,y1) is definitely the top..
i_nswap2: cmp y2,y3
	jr pl,i_nswap3
	swap x2,x3
	swap y2,y3
	swap i2,i3		;The points are now in top-to-bottom order,
i_nswap3:

;	movei #stopgpu,r0	;Rough clipping kludge
;	movei #239,r1
;	cmp r1,y3		;Rough clip of bottom
;	jump pl,(r0)
;	nop
	
	move y2,count1
	move y3,count2
	sub y1,count1
	sub y2,count2
	move y3,count3
	addq #1,count1
	sub y1,count3
	addq #1,count2
	addq #1,count3		;COUNT1=Y length of first span, count2=second span, y3=third span

	move x3,xinc2
	move x2,xinc1
	sub x1,xinc2
	sub x1,xinc1
	move i3,iinc2
	move i2,iinc1		;copy target values...
	sub i1,iinc2
	sub i1,iinc1
	shlq #16,xinc2
	shlq #16,xinc1		;pixel values to 16:16


	sdiv count1,xinc1
	sdiv count3,xinc2	;get the gradient increments for x...
	sdiv count1,iinc1
	sdiv count3,iinc2	;and the i-increments.

	movefa colour,count3	;COLOUR in the altbank held the poly colour
	movei #i_loop1,loop1
	move count3,r0
	movei #i_loop2,loop2	;initialise loop addresses
	shlq #16,count3

	move x1,sum1
	or r0,count3
	move i1,sum2
	shlq #8,count3		;finish preparing colour for blitter



	move x1,sum3
	move i1,sum4
	shlq #16,sum1
	shlq #16,sum3		;copy start parameters and convert to 16:16

;* now init the Blitter

	movei #tri1on,r0
	cmpq #0,y1		;check 4 y2 onscreen
	jump pl,(r0)		;tri1 is onscreen, no top clipping
	nop
	movei #cliptri1,r0
	cmpq #0,y2
	jr eq,split2
	nop
	jump pl,(r0)		;got to clip Triangle One
	nop
	cmpq #0,y3
	jr pl,split2		;check for whole thing off top edge?
	nop	
	movei #zkk,r0
	jump (r0)		;Halt - no clip for 2nd triangle yet
	nop
split2: move count1,r0		;Code to skip the first subtriangle
	shlq #16,r0
	move xinc2,r1
	move iinc2,r31
	fmult r1,r0
	fmult r31,r0
	add r1,sum3
	add r31,sum4		;where long edge would be at
	xor y1,y1
	move x2,sum1
	move i2,sum2
	shlq #16,sum1
	movei #setp2,r0		;skip to next subtriangle
	jump (r0)
	nop


cliptri1: move y1,r0		;get amount of clip lines
	add y1,count1		;reduce count by the size of the clip
	neg r0			;make it +ve
	addq #1,count1		;(never zero)
	shlq #16,r0		;make it 16:16
	move xinc1,r1
	move iinc1,r31
	fmult r1,r0
	fmult r31,r0		;calculate total increment to clip line
	add r1,sum1
	add r31,sum2
	move xinc2,r1
	move iinc2,r31
	fmult r1,r0
	fmult r31,r0
	add r1,sum3
	add r31,sum4		;now, offsets are OK and the poly is shortened
	moveq #0,y1		;(it starts at top of screen)
tri1on: movei #279,r0
	movei #zkk,r31
	cmp r0,y1		;check for right off bottom edge
	jump pl,(r31)		;next poly if it was
	nop
	movei #tri1bot,r1
	cmp r0,y2		;check for this subtri split
	jump mi,(r1)		;not split, jump around
	nop
	move y2,r1
	sub r0,r1		;get amount of overhang
	sub r1,count1		;shorten poly by that amount
	jump mi,(r31)
	nop
	jump eq,(r31)		;ensure -ve or 0 length never happens
	nop

tri1bot: shlq #16,y1		;y1 to blitter format


i_loop1:

;****	Blit a line of poly

	move sum1,xstart
	move sum2,istart
	move sum3,xsize
	move sum4,isize

	cmp sum1,sum3
	jr pl,i_nswap4		;no NOP as first swap macro instruction iz harmless
	swap xstart,xsize
	swap istart,isize	;make sure increasing x from xstart
i_nswap4: sub xstart,xsize
	sub istart,isize	;calc delta X and delta I

	sharq #16,xstart		;make these
	shrq #16,xsize		;back to integer
	addq #1,xsize

	sdiv xsize,isize	;Get iinc per pixel

	waitblit
	movei #B_PATD,r1
	store count3,(r1)	;count3 used to hold colour
	addq #4,r1
	store count3,(r1)		;colour is set in the pattern register



	movei #(PITCH1|PIXEL16|WID384|XADDPHR),r1	;default-settings for Phrase Mode
	move xsize,r0
	shrq #4,r0		;Check for short lines where phrase mode don't work...
	jr eq,i_setpix
	nop
	movei #i_gophrase,r0
	jump (r0)
	nop
i_setpix:	bset #16,r1		;this sets pixel mode, if xsize is <32
 	movei #B_I3,r0
 	store istart,(r0)
	movei #i_pixmode,r0
	store r1,(a1+_flags)	;flags to pixelmode
	jump (r0)
	nop

i_gophrase: store r1,(a1+_flags)	;flags to phrasemode
	moveta istart,istart
 	move xstart,r0
	moveq #$03,r31
	and r31,r0		;r2 is 0-3 according to which pixel xstart is within 1 phrase
i_alignr: cmpq #0,r0		;align i-gradient to position in the phrase
	jr eq,i_aligned
	nop
	sub isize,istart
	subq #1,r0
	jr i_alignr
	nop

i_aligned: move istart,r0		;check for initial overflow
	shrq #24,r0
	jr eq,i_all_ok
	nop
	movei #i_setpix,r0	;set pixelmode if true
	movefa istart,istart
	jump (r0)
	nop
i_all_ok:	move isize,r1
	shlq #2,isize
 	movei #B_I0,r0
 	store istart,(r0)
	add r1,istart
	subq #4,r0
	store istart,(r0)
	add r1,istart
	subq #4,r0
	store istart,(r0)
	add r1,istart
	subq #4,r0
	store istart,(r0)	;set the intensities for the first 4 pixels

i_pixmode: movei #B_IINC,r0
	movei #$ffffff,r1
	and r1,isize		;make it 24 bit signed

	store isize,(r0)	;set the intensity-increment

	movei #skip1,r1
	cmpq #0,y1
	jump mi,(r1)
	nop

	movei #$ffff,r1
	and r1,xstart
	or y1,xstart		;form a pixel address
	store xstart,(a1+_pixel)


	bset #16,xsize		;xsize can now be used to set the blitter's count
	
	movei #B_COUNT,r0
	store xsize,(r0)	;set the count

	store cmd,(blit)		;Blit away

;****   Poly line blit end


skip1:	movei #$10000,r0
	add r0,y1		;step to nxt scanline
	add xinc1,sum1
	add iinc1,sum2
	add xinc2,sum3
	subq #1,count1
	jump ne,(loop1)
	add iinc2,sum4		;move to next values

setp2:	move x3,xinc1
	move i3,iinc1		;new target point is x3/i3
	sub x2,xinc1
	sub i2,iinc1		;get differences
	shlq #16,xinc1

	sdiv count2,xinc1
	sdiv count2,iinc1	;new increments

	movei #tri2on,r0
	cmpq #0,y2		;Check for poly split by screen top
	jump pl,(r0)		;Not split if y2 positive
	nop
 	move y2,r0		;get amount of clip lines
	add y2,count2		;reduce count by the size of the clip
	neg r0			;make it +ve
	addq #1,count2		;(never zero)
	shlq #16,r0		;make it 16:16
	move xinc1,r1
	move iinc1,r31
	fmult r1,r0
	fmult r31,r0		;calculate total increment to clip line
	add r1,sum1
	add r31,sum2
	move xinc2,r1
	move iinc2,r31
	fmult r1,r0
	fmult r31,r0
	add r1,sum3
	add r31,sum4		;now, offsets are OK and the poly is shortened
	moveq #0,y2

tri2on: movei #279,r0
	movei #zkk,r31
	cmp r0,y2		;check for right off bottom edge
	jump pl,(r31)		;next poly if it was
	nop
	movei #tri2bot,r1
	cmp r0,y3		;check for this subtri split
	jump mi,(r1)		;not split, jump around
	nop
	move y3,r1
	sub r0,r1		;get amount of overhang
	sub r1,count2		;shorten poly by that amount
	jump mi,(r31)
	nop
	jump eq,(r31)		;ensure -ve or 0 length never happens
	nop

tri2bot:

i_loop2:

;****	Blit a line of poly

	move sum1,xstart
	move sum2,istart
	move sum3,xsize
	move sum4,isize

	cmp sum1,sum3
	jr pl,n3swap4		;no NOP as first swap macro instruction iz harmless
	swap xstart,xsize
	swap istart,isize	;make sure increasing x from xstart
n3swap4:	sub xstart,xsize
	sub istart,isize	;calc delta X and delta I

	sharq #16,xstart		;make these
	shrq #16,xsize		;back to integer
	addq #1,xsize

	sdiv xsize,isize	;Get iinc per pixel

	waitblit
	movei #B_PATD,r1
	store count3,(r1)	;count3 used to hold colour
	addq #4,r1
	store count3,(r1)		;colour is set in the pattern register



	movei #(PITCH1|PIXEL16|WID384|XADDPHR),r1	;default-settings for Phrase Mode
	move xsize,r0
	shrq #4,r0		;Check for short lines where phrase mode don't work...
	jr eq,s3etpix
	nop
	movei #g3ophrase,r0
	jump (r0)
	nop
s3etpix: bset #16,r1		;this sets pixel mode, if xsize is <32
 	movei #B_I3,r0
 	store istart,(r0)
	movei #p3ixmode,r0
	store r1,(a1+_flags)	;flags to pixelmode
;	move isize,r1
	jump (r0)
	nop

g3ophrase: store r1,(a1+_flags)	;flags to phrasemode
	moveta istart,istart
 	move xstart,r0
	movei #$03,r31
	and r31,r0		;r2 is 0-3 according to which pixel xstart is within 1 phrase
a3ligner: cmpq #0,r0		;align i-gradient to position in the phrase
	jr eq,a3ligned
	nop
	sub isize,istart
	subq #1,r0
	jr a3ligner
	nop

a3ligned: move istart,r0		;check for initial overflow
	shrq #24,r0
	jr eq,a3ll_ok
	nop
	movei #s3etpix,r0	;set pixelmode if true
	movefa istart,istart
	jump (r0)
	nop
a3ll_ok:
	move isize,r1
	shlq #2,isize
 	movei #B_I0,r0
 	store istart,(r0)
	add r1,istart
	subq #4,r0
	store istart,(r0)
	add r1,istart
	subq #4,r0
	store istart,(r0)
	add r1,istart
	subq #4,r0
	store istart,(r0)	;set the intensities for the first 4 pixels

p3ixmode:
	movei #B_IINC,r0
	movei #$ffffff,r1
	and r1,isize		;make it 24 bit signed

	store isize,(r0)	;set the intensity-increment

	movei #skip2,r1
	cmpq #0,y1
	jump mi,(r1)
	nop

	movei #$ffff,r1
	and r1,xstart
	or y1,xstart		;form a pixel address
	store xstart,(a1+_pixel)


	bset #16,xsize		;xsize can now be used to set the blitter's count
	movei #B_COUNT,r0
	store xsize,(r0)	;set the count

	store cmd,(blit)		;Blit away

;****   Poly line blit end

skip2:	movei #$10000,r0
	add r0,y1		;step to nxt scanline
	add xinc1,sum1
	add iinc1,sum2
	add xinc2,sum3
	subq #1,count2
	jump ne,(loop2)
	add iinc2,sum4		;move to next values

;*******
;******* polyrenderer code end
;*******


zkk:
	bank1

	subq #1,faces
	jump ne,(poly_loop)		;loop for all faces
	nop

	bank0

StopGPU: movei #G_CTRL,r1	;point at GPU flags
	load (r1),r0
	bclr #0,r0
	store r0,(r1)		;stop the GPU
stoploop: jr stoploop
	nop




pring2:
;
; Pixel Ring for explosions; small pixels. Enter with:
; in_buf=# pixels this ring
; +4=X centre
; +8=Y centre
; +12=Z centre		;all 16:16 frax
; +16=Raw colour 	;0-255
; +20=Radius as 16:16 frac

	dstx		REGEQU r21
	dsty		REGEQU r26	
	dstz		REGEQU r1
	dstc		REGEQU r10
	lwid		REGEQU r11
	scrbase		REGEQU r12
	l_2		REGEQU r13
	x_max		REGEQU r14
	y_max		REGEQU r15
	radius		REGEQU r16
	sinbass		REGEQU r17
	loop_ptr	REGEQU r18
	phase		REGEQU r19
	forty		REGEQU r20
	bytemask	REGEQU r22
	eighty		REGEQU r23
	xcentr 		REGEQU r24
	ycentr		REGEQU r25

	MACRO pix
	movei #fxex@@,r0
	cmpq #0,dstx
	jump mi,(r0)
	nop
	cmpq #0,dsty
	jump mi,(r0)
	nop
	cmp x_max,dstx
	jump pl,(r0)
	nop
	cmp y_max,dsty
	jump pl,(r0)
	nop
	shlq #1,dstx		;x times 2 to point at words...	
	mult lwid,dsty		;Y*linewidth	
	add dsty,dstx	
	add scrbase,dstx		;r6 now points to actual screen location
	storew dstc,(dstx)		;store that pixel
fxex@@: nop
	ENDM




	movei #$100,r2		;ready for the div
	

	movei #in_buf,r0
	load (r0),r3
	addq #4,r0
	div r3,r2		;start divide unit going while the rest is loaded
	load (r0),dstx
	addq #4,r0
	load (r0),dsty
	addq #4,r0
	load (r0),dstz
	addq #4,r0
	load (r0),dstc		;get initial parameters
	addq #4,r0
	load (r0),radius
	addq #4,r0
	abs radius
	load (r0),phase
	movei #gpu_screen,r0
	load (r0),scrbase	;get screenbase

	movei #p_sines,sinbass	;get base of sinetable
	movei #$40,forty	;hex forty for doing sine
	movei #$80,eighty
	movei #$ff,bytemask
	movei #width,x_max
	movei #height,y_max

	movei #sysflags,r0
	load (r0),r6
	btst #5,r6
	jr z,notpal
	nop
	movei #280,y_max
notpal:


	movei #ycent,r0
	load (r0),ycentr
	addq #4,r0
	load (r0),xcentr
;	move x_max,xcentr
;	move y_max,ycentr
;	shrq #1,xcentr
;	shrq #1,ycentr
	move x_max,lwid
	subq #2,y_max
	shlq #1,lwid
	subq #2,x_max		;set screen width and clip constants
	move lwid,l_2
	subq #2,l_2

	shrq #14,dstz		;convert z to scaling value
	
	move radius,r0
	movei #$ff,r6
	shrq #16,r0
	sub r0,r6		;r6 has byte i-value (I think)
	shlq #8,dstc
	or r6,dstc		;generate combined i- and c-value

	sdiv dstz,dstx
	sdiv dstz,dsty		;perspective transform xy centre position
	sdiv dstz,radius	;scale the radius
	sharq #7,dstx
	sharq #7,dsty
	sharq #7,radius		;dest x y and radius to integer
	add xcentr,dstx
	add ycentr,dsty		;dest xy to screen co-ordinates

	movei #pixloop2,loop_ptr
	moveta dstx,dstx
	moveta dsty,dsty	;set loop counter, preserve original xy centre

pixloop2: move phase,r0
	move phase,r4
	and bytemask,r0
	add forty,r4
	add sinbass,r0
	and bytemask,r4
	loadb (r0),r5
	add sinbass,r4
	sub eighty,r5
	loadb (r4),r6
	sub eighty,r6		;r5/r6 have got sine and cos +/- 128

	imult radius,r5
	imult radius,r6
	sharq #8,r5
	sharq #8,r6		;scaled sine/cos components

	movefa dstx,dstx
	movefa dsty,dsty
	add r5,dstx
	add r6,dsty		;translate to position relative to centre

	pix			;draw single clipped pixel

	add r2,phase		;shift phase
	subq #1,r3		;dec ring pixel count
	jump pl,(loop_ptr)	;loop for all stuff
	nop
	movei #StopGPU,r0
	jump (r0)
	nop			;terminate

psphere:
;
; Generate a sphere of particles. Inputs: x,y,z,xyrad,xyphase,yzphase,xycount,yzcount,xystep,yzstep,col
;


	byte_mask	REGEQU r20
	sine_base	REGEQU r21
	xmid		REGEQU r22
	ymid		REGEQU r25
	xmax		REGEQU r23
	ymax		REGEQU r24
	s_base		REGEQU r30
	l_length 	REGEQU r26

	s_x		REGEQU r2
	s_y		REGEQU r3
	s_z		REGEQU r4
	xyrad		REGEQU r5
	xyint		REGEQU r6
	xyphase		REGEQU r7
	yzphase		REGEQU r8
	xycount		REGEQU r9
	yzcount		REGEQU r10
	xystep		REGEQU r11
	yzstep		REGEQU r12
	s_col		REGEQU r13

	s_outer		REGEQU r14
	s_skip		REGEQU r15

	_forty		REGEQU r16
	_eighty		REGEQU r17

	movei #p_sines,sine_base		;initialise constants
	movei #$ff,byte_mask
	movei #$17f,xmax
	movei #$117,ymax
	movei #$300,l_length
	movei #ycent,r0
	load (r0),ymid
	addq #4,r0
	load (r0),xmid
	movei #$80,_eighty
	move _eighty,_forty
	shrq #1,_forty
	
	movei #gpu_screen,r0
	load (r0),s_base		;get screen base

	movei #in_buf,r0		;fetch the parameters out of in_buf
	load (r0),s_x
	addq #4,r0
	load (r0),s_y
	addq #4,r0
	load (r0),s_z
	addq #4,r0
	load (r0),xyrad
	addq #4,r0
	load (r0),xyphase
	addq #4,r0
	load (r0),yzphase
	addq #4,r0
	load (r0),xycount
	addq #4,r0
	load (r0),yzcount
	addq #4,r0
	load (r0),xystep
	addq #4,r0
	load (r0),yzstep
	addq #4,r0
	load (r0),s_col
	addq #4,r0
	load (r0),xyint

	movei #sphout,s_outer		;init loop addresses
	movei #spskip,s_skip
	moveta xycount,xycount
	moveta xyphase,xyphase
	shlq #8,s_col

sphout: move xyphase,r0
	move xyphase,r1
	add xystep,xyphase
	and byte_mask,r0
	add _forty,r1
	add sine_base,r0
	and byte_mask,r1
	loadb (r0),r27
	add sine_base,r1
	sub _eighty,r27
	loadb (r1),r28
	sub _eighty,r28			;get sine and cos +/-128 of ring pixel, in r27/r28

	imult xyrad,r27
	imult xyrad,r28

 	move yzphase,r0
	move yzphase,r1
	and byte_mask,r0
	add _forty,r1
	add sine_base,r0
	and byte_mask,r1
	loadb (r0),r18
	add sine_base,r1
	sub _eighty,r18
	loadb (r1),r19
	sub _eighty,r19			;get sine and cos of the twist, in r18/r19

	neg r18				;make -sin
	move r27,r29
	imult r18,r29			;z is -sin*x
	imult r19,r27			;transformed x

	shlq #7,r28			;Everything should now be 8:8
;	imult xyrad,r27
;	imult xyrad,r28
;	imult xyrad,r29			;scale it...
	add s_x,r27
	add s_y,r28
	add s_z,r29			;move it where it has to go...
	jump mi,(s_skip)
	sharq #14,r29			;Z to persp div range
	addq #1,r29
	sdiv0 r29,r27			;sdiv0 is like sdiv but uses r0
	sdiv0 r29,r28
	
	sharq #7,r27
	sharq #7,r28			;complete the perspective xform
	add xmid,r27
	jump mi,(s_skip)			;clip-as-we-go... clip...   clip...
	add ymid,r28			;translate to screen centre
	jump mi,(s_skip)
	cmp xmax,r27			;Clip, clip...
	jump pl,(s_skip)
	cmp ymax,r28			;...clip, clip, clip, CLIP, CLIP CLIPCLIPCLIPCLIP
	jump pl,(s_skip)
	shlq #1,r27			;translate XY coordinates into screen address Thang
	mult l_length,r28
	shrq #4,r29			;Rude and hairy way to simulate a proper i-calculation
	add r27,r28			;r28 is offset to screen pixel
	and byte_mask,r29			;Hairy and rude, I tell you
	add s_base,r28			;r28 now points directly at an expectantly quivering pixel
	move byte_mask,r0		;No good will come of it, it's cheating
	sub r29,r0			;AAARRRGHH I"M NOT INTERLEAVED ANYMORE!
	mult xyint,r0
	shrq #8,r0
	or s_col,r0			;combile colour and disgustingly unrigorous i-value
	storew r0,(r28)

spskip: add xystep,xyphase		;next phase pos.
	subq #1,xycount
	jump ne,(s_outer)			;loop all arc
	nop
	movefa xyphase,xyphase
	movefa xycount,xycount		;restore arc size
	add yzstep,yzphase		;do twist
	subq #1,yzcount
	jump ne,(s_outer)
	nop
	movei #stopgpu,r0
	jump (r0)
	nop				;done


