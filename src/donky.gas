
        Base equ $f00000

  INCLUDE       "jaguar.inc"    ; Jaguar General definitions

        gpu_mode EQU (G_RAM+$ffc)       ; Number defines which routine the GPU will do
        gpu_screen EQU (G_RAM+$ff8)     ; The address of the screen the GPU will draw on
        source_flags    EQU (G_RAM+$ff4)
        dest_flags EQU (G_RAM+$ff0)     ; Blitter flags 4 source+dest
        backg   EQU (G_RAM+$fec)

        p_sines EQU $30000              ; 256-byte sine table of unsigned bytes
        in_buf  EQU (G_RAM+$f60)        ; General space for passing stuff to GPU
        ycent   EQU (G_RAM+$ef8)
        
        ORG $f03000
        width EQU 384
        mwidth EQU 768
        height EQU 240
        diag EQU $4000

;***** EQUATES for Blitter offsets

        _base EQU 0
        _flags EQU 1
        _clip EQU 2
        _mask EQU 2
        _pixel EQU 3 
        _step EQU 4
        _fstep EQU 5
        _fpixel EQU 6
        _inc EQU 7
        _finc EQU 8

        MACRO sdiv      ;Divide, keeping sign of that which is divided, uses r27
        move \2,r31
        abs \2
        div \1,\2
        btst #31,r31    ;Get sign bit of original thang
        jr z,\~sdtt
        nop
        neg \2
\~sdtt: 
        ENDM
        MACRO waitblit  ; Wait for the Blitter to stop
\~waitt:        load (blit),r31
        btst #0,r31
        jr z,\~waitt
        nop
        ENDM

        MACRO fmult     ;multiply 2 thangs, uses r2-r4, returns in first reg.
        moveta \2,r31   ;(preserves second Thang)
        moveq #0,r27
        move r27,r28
        abs \1
        addc r28,r27
        abs \2
        addc r28,r27
        move \2,r28
        mult \1,r28
        move \1,r29
        shrq #16,r28
        shrq #16,r29
        mult \2,r29
        shrq #16,\2
        add r29,r28
        move \2,r29
        mult \1,r29
        shrq #16,\1
        add r29,r28
        mult \2,\1
        shlq #16,\1
        add r28,\1
        btst #0,r27
        jr z,\~fmptt
        movefa r31,\2
        neg \1
\~fmptt:
        ENDM

        MACRO bank0
        movei #G_FLAGS,r0
        load (r0),r31
        bclr #14,r31
        store r31,(r0)                  ;Switch to Register Bank #0
        nop
        nop
        nop
        nop
        nop
\~bnk0tt:       movei #G_FLAGS,r0
        load (r0),r31
        btst #14,r31
        jr nz,\~bnk0tt
        nop
        ENDM

        MACRO bank1
        movei #G_FLAGS,r0
        load (r0),r31
        bset #14,r31
        store r31,(r0)                  ;Switch to Register Bank #1
        nop
        nop
        nop
        nop
        nop
\~bnk1tt:       movei #G_FLAGS,r0
        load (r0),r31
        btst #14,r31
        jr z,\~bnk1tt
        nop
        ENDM

        MACRO swap
        move \1,r31
        move \2,\1
        move r31,\2
        ENDM

        MACRO fjsr      ;Fast single-level JSR
        move PC,r30
        jump (\1)
        addq #6,r30     ; Determine Return Address
        ENDM

        MACRO frts
        jump (r30)
        nop
        ENDM


        
        x1_n            REGEQU r3       
        y1_n            REGEQU r4
        x2_n            REGEQU r5
        y2_n            REGEQU r6
        x3_n            REGEQU r7
        y3_n            REGEQU r8
        i1_n            REGEQU r9
        i2_n            REGEQU r10
        i3_n            REGEQU r11
        xinc1           REGEQU r12
        iinc1           REGEQU r15
        xinc2           REGEQU r16
        iinc2           REGEQU r17
        count1          REGEQU r18
        count2          REGEQU r19
        loop1           REGEQU r20
        loop2           REGEQU r21
        count3          REGEQU r22
        sum1            REGEQU r23
        sum2            REGEQU r24
        sum3            REGEQU r25
        sum4            REGEQU r26

        xstart          REGEQU r27
        istart          REGEQU r28
        xsize           REGEQU r29
        isize           REGEQU r30
        cmd             REGEQU r2


        blit            REGEQU r13
        n_a1            REGEQU r14

;*      Definitions for use in the alternate-register bank. Alternate r0 and ISTART are used in the polyrenderer.

        sinebase        REGEQU r23
        polypointer     REGEQU r24
        xxx             REGEQU r25
        yyy             REGEQU r26
        zzz             REGEQU r12
        glint           REGEQU r13
;       ycen            REGEQU r14
        faces           REGEQU r15
        sin             REGEQU r16
        cos             REGEQU r17
        byte            REGEQU r18
        ctptr           REGEQU r19
        poly_loop       REGEQU r20
        colour          REGEQU r21
        angl            REGEQU r22


; *******************************************************************
; Detect the GPU mode selected by the caller.
; *******************************************************************
        movei #gpu_mode,r0
        load (r0),r1
        movei #starplane,r2
        cmpq #1,r1
        jump eq,(r2)
        nop

; *******************************************************************
;*
;* WEB3D:  Draw 3D Web made of polygons, positioned in Tempest 3D space
;*
;* Inputs: IN_BUF+0=Pointer to standard Web data structure
;*         +4=X +8=Y +12=Z, Tempest world co-ordinates
;*         +16=X centre; +20=Y centre, as 16:16 fractions; +24=XY Rotation Angle
;*
; *******************************************************************
        bank0

        movei #A1_BASE,n_a1     ;blitter Base
        movei #B_CMD,blit       ;blitter flags/go
        movei #(PATDSEL|CLIP_A1|GOURD),cmd      ;blitter Go command
        waitblit                        ;make sure it's stopped
        movei #gpu_screen,r0
        load (r0),r1
        store r1,(n_a1) ;screen destination base address set
        movei #$1180180,r0
        nop
        store r0,(n_a1+_clip)   ;clip window dimensions
        nop


        bank1

        movei #in_buf,r0
        load (r0),polypointer           ;Get poly stuff
        addq #4,r0
        load (r0),xxx
        addq #4,r0
        load (r0),yyy
        addq #4,r0
        load (r0),zzz
        addq #4,r0
        load (r0),glint
        addq #8,r0
;       load (r0),ycen
;       addq #4,r0
;       shlq #3,xcen
;       shlq #3,ycen                    ;default Web scaleup
        load (r0),r1
        addq #4,r0
        load (r0),angl                  ;this is the rotation angle
;       addq #4,r0
;       load (r0),ctptr                 ;colourtable pointer

        movei #$ff,byte
        move r1,r0
        movei #p_sines,sinebase         ;initialise some constants

        movei #$40,r2
        and byte,r0
        add r2,r1
        add sinebase,r0
        and byte,r1
        loadb (r0),sin
        add sinebase,r1
        movei #$80,r0
        loadb (r1),cos                  ;get sine and cosine values
        sub r0,sin
        sub r0,cos                      ;make them signed
        add r2,angl

        loadw (polypointer),faces       ;get # of faces (# channels)
        addq #4,polypointer             ;skip past init centre - pointing at start of vertex pairs

        move faces,ctptr
        addq #2,ctptr
        shlq #2,ctptr
        addq #2,ctptr
        add polypointer,ctptr
        move ctptr,r0
        subq #2,r0
        loadw (r0),r31                  ;connect flag


        move faces,r14
        shlq #1,r14
        cmpq #0,r31
        jr eq,notcon
        nop
        addq #2,r14

notcon: movei #polyloop,poly_loop
        move zzz,r29
        movei #$500000,r0
        add r0,zzz
        jr pl,nozod
        nop
        movei #StopGPU,r0
        jump (r0)
        nop
nozod:  sub r0,r29
        addq #1,r29
        cmpq #1,r29
        jr pl,rrpos
        nop
        xor r29,r29
rrpos:
        shrq #14,zzz                    ;scale z properly
        shrq #14,r29
        addq #1,r29                     ;make sure r29 is never 0

polyloop: nop
        loadw (polypointer),r1
        addq #2,polypointer
        loadw (polypointer),r2
        addq #2,polypointer
        shlq #16,r1
        shlq #16,r2
        sharq #13,r1
        sharq #13,r2
        loadw (polypointer),r27
        addq #2,polypointer
        loadw (polypointer),r28
        subq #2,polypointer             ;leaves polypointer positioned right to pick up next channel
        shlq #16,r27
        shlq #16,r28
        sharq #13,r27
        sharq #13,r28

        loadw (ctptr),i3_n
        add r14,ctptr
        move colour,i3_n
        loadw (ctptr),colour
        sub r14,ctptr
        addq #2,ctptr
        add angl,i3_n
        and byte,i3_n
        add sinebase,i3_n
        loadb (i3_n),r0
        shrq #1,r0
        addq #32,r0
        addq #32,r0
        mult glint,r0
        shrq #8,r0

        shlq #6,r0
        move r0,i3_n
        shlq #2,r0
        move r0,i2_n
        move r0,i1_n
        


;       shlq #4,i3_n
;       move i3_n,i2_n
;       shlq #4,i2_n
;       move i2_n,i1_n

;       movei #$ff00,i1_n
;       movei #$ff00,i2_n
;       movei #$0400,i3_n
        
        movei #dopolly,r0
        fjsr r0

;       loadw (ctptr),i1_n
;       add r14,ctptr
;       loadw (ctptr),colour
;       sub r14,ctptr
;       add angl,i1_n
;       addq #2,ctptr
;       and byte,i1_n
;       add sinebase,i1_n
;       loadb (i1_n),r0
;       shrq #1,r0
;       addq #32,r0
;       addq #32,r0
;       shlq #6,r0
;       move r0,i1_n
;       move r0,i2_n
;       shlq #2,r0
;       move r0,i3_n

        swap i3_n,i1_n
        move i1_n,i2_n

;       movei #$0400,i1_n
;       movei #$0400,i2_n
;       movei #$ff00,i3_n
        
        swap zzz,r29
        swap r1,r27
        swap r2,r28             ;effectively invert the poly

        movei #dopolly,r0
        fjsr r0

        swap zzz,r29

        subq #1,faces
        jr mi,aquit
        nop
        jump ne,(poly_loop)             ;loop for all faces
        nop
        move polypointer,r0
        addq #8,r0
        loadw (r0),r31
        cmpq #0,r31
        jump ne,(poly_loop)
        nop
aquit:  bank0

StopGPU: movei #G_CTRL,r1       ;point at GPU flags
        load (r1),r0
        bclr #0,r0
        store r0,(r1)           ;stop the GPU
stoploop: jr stoploop
        nop




dopolly: moveta i1_n,i1_n               
        moveta i2_n,i2_n
        moveta i3_n,i3_n                        ;all three i-values to altern8s

        move r1,x1_n
        move r2,y1_n

        subq #32,x1_n
        subq #32,y1_n
        subq #32,x1_n
        subq #32,y1_n
;       sub xcen,x1_n
;       sub xcen,y1_n                   ;move to local centre
        move x1_n,x2_n
        move y1_n,y2_n                  ;copy them for rotation
        neg y1_n                                ;y1_n will be the -SIN term in the rotation so negate it
        imult cos,x1_n
        imult sin,y1_n
        imult sin,x2_n
        imult cos,y2_n                  ;do the rotation-multiplies
        add y1_n,x1_n
        add x2_n,y2_n                   ;add the products, resultant rotated point is (x1_n,y2_n)
        shlq #8,x1_n
        shlq #8,y2_n                    ;rotated point to 16:16
        add xxx,x1_n
        add yyy,y2_n                    ;move to final XY in Tempest space
        sdiv r29,x1_n
        sdiv r29,y2_n                   ;perspective transform
        sharq #7,x1_n
        sharq #7,y2_n

        movei #ycent,r0
        load (r0),r31

        movei #192,r0

;       movei #120,r31
        add r0,x1_n                     ;final x1_n
        add r31,y2_n                    ;final y1_n
        moveta x1_n,x1_n                        ;                                               *****
        moveta y2_n,y1_n                        ;Set up in alternates for the polyrenderer      *****   

        move r27,x1_n
        move r28,y1_n

        subq #32,x1_n
        subq #32,y1_n
        subq #32,x1_n
        subq #32,y1_n
;       sub xcen,x1_n
;       sub xcen,y1_n                   ;move to local centre
        move x1_n,x2_n
        move y1_n,y2_n                  ;copy them for rotation
        neg y1_n                                ;y1_n will be the -SIN term in the rotation so negate it
        imult cos,x1_n
        imult sin,y1_n
        imult sin,x2_n
        imult cos,y2_n                  ;do the rotation-multiplies
        add y1_n,x1_n
        add x2_n,y2_n                   ;add the products, resultant rotated point is (x1_n,y2_n)
        shlq #8,x1_n
        shlq #8,y2_n                    ;rotated point to 16:16
        add xxx,x1_n
        add yyy,y2_n                    ;move to final XY in Tempest space
        sdiv r29,x1_n
        sdiv r29,y2_n                   ;perspective transform
        sharq #7,x1_n
        sharq #7,y2_n

        movei #ycent,r0
        load (r0),r31

        movei #192,r0

        add r0,x1_n                     ;final x1_n
        add r31,y2_n                    ;final y1_n
        moveta x1_n,x2_n                        ;                                               *****
        moveta y2_n,y2_n                        ;Set up in alternates for the polyrenderer      *****   

        move r1,x1_n
        move r2,y1_n

        subq #32,x1_n
        subq #32,y1_n
        subq #32,x1_n
        subq #32,y1_n
;       sub xcen,x1_n
;       sub xcen,y1_n                   ;move to local centre
        move x1_n,x2_n
        move y1_n,y2_n                  ;copy them for rotation
        neg y1_n                                ;y1_n will be the -SIN term in the rotation so negate it
        imult cos,x1_n
        imult sin,y1_n
        imult sin,x2_n
        imult cos,y2_n                  ;do the rotation-multiplies
        add y1_n,x1_n
        add x2_n,y2_n                   ;add the products, resultant rotated point is (x1_n,y2_n)
        shlq #8,x1_n
        shlq #8,y2_n                    ;rotated point to 16:16
        add xxx,x1_n
        add yyy,y2_n                    ;move to final XY in Tempest space
        sdiv zzz,x1_n
        sdiv zzz,y2_n                   ;perspective transform
        sharq #7,x1_n
        sharq #7,y2_n
;       movei #120,r31

        movei #ycent,r0
        load (r0),r31
        movei #192,r0

        add r0,x1_n                     ;final x1_n
        add r31,y2_n                    ;final y1_n
        moveta x1_n,x3_n                        ;                                               *****
        moveta y2_n,y3_n                        ;Set up in alternates for the polyrenderer      *****   

;* Now everything is set up, time to render the poly.


        bank0

;*******
;******* polyrenderer code start
;*******



        shlq #8,i1_n                    ;This is the polyrenderer, same as POLY above
        shlq #8,i2_n
        shlq #8,i3_n            ;intensity values to 24-Bit

        

        cmp y1_n,y2_n           ;Get vertices in order: (x1_n,y1_n)=TOP (lowest y) ---> (x3_n,y3_n)=BOTTOM
        jr pl,i_nswap1          ;No nop after, as first bit of the macro only bashes r31
        swap x1_n,x2_n
        swap y1_n,y2_n
        swap i1_n,i2_n
i_nswap1: cmp y1_n,y3_n
        jr pl,i_nswap2
        swap x1_n,x3_n
        swap y1_n,y3_n
        swap i1_n,i3_n          ;Now, (x1_n,y1_n) is definitely the top..
i_nswap2: cmp y2_n,y3_n
        jr pl,i_nswap3
        swap x2_n,x3_n
        swap y2_n,y3_n
        swap i2_n,i3_n          ;The points are now in top-to-bottom order,
i_nswap3:


;       movei #zkk,r0
;       movei #239,r1
;       cmp r1,y3_n
;       jump pl,(r0)
;       nop
;       cmpq #0,y1_n
;       jump mi,(r0)
;       nop
        
        move y2_n,count1
        move y3_n,count2
        sub y1_n,count1
        sub y2_n,count2
        move y3_n,count3
        addq #1,count1
        sub y1_n,count3
        addq #1,count2
        addq #1,count3          ;COUNT1=Y length of first span, count2=second span, y3_n=third span

        move x3_n,xinc2
        move x2_n,xinc1
        sub x1_n,xinc2
        sub x1_n,xinc1
        move i3_n,iinc2
        move i2_n,iinc1         ;copy target values...
        sub i1_n,iinc2
        sub i1_n,iinc1
        shlq #16,xinc2
        shlq #16,xinc1          ;pixel values to 16:16


        sdiv count1,xinc1
        sdiv count3,xinc2       ;get the gradient increments for x...
        sdiv count1,iinc1
        sdiv count3,iinc2       ;and the i-increments.

        movefa colour,count3    ;COLOUR in the altbank held the poly colour
        movei #i_loop1,loop1
        move count3,r0
        movei #i_loop2,loop2    ;initialise loop addresses
        shlq #16,count3

        move x1_n,sum1
        or r0,count3
        move i1_n,sum2
        shlq #8,count3          ;finish preparing colour for blitter



        move x1_n,sum3
        move i1_n,sum4
        shlq #16,sum1
        shlq #16,sum3           ;copy start parameters and convert to 16:16

;* now init the Blitter

        movei #tri1on,r0
        cmpq #0,y1_n            ;check 4 y2_n onscreen
        jump pl,(r0)            ;tri1 is onscreen, no top clipping
        nop
        movei #cliptri1,r0
        cmpq #0,y2_n
        jr eq,split2
        nop
        jump pl,(r0)            ;got to clip Triangle One
        nop
        cmpq #0,y3_n
        jr pl,split2            ;check for whole thing off top edge?
        nop     
        movei #zkk,r0
        jump (r0)               ;Halt - no clip for 2nd triangle yet
        nop
split2: move count1,r0          ;Code to skip the first subtriangle
        shlq #16,r0
        move xinc2,r1
        move iinc2,r31
        fmult r1,r0
        fmult r31,r0
        add r1,sum3
        add r31,sum4            ;where long edge would be at
        xor y1_n,y1_n
        move x2_n,sum1
        move i2_n,sum2
        shlq #16,sum1
        movei #setp2,r0         ;skip to next subtriangle
        jump (r0)
        nop


cliptri1: move y1_n,r0          ;get amount of clip lines
        add y1_n,count1         ;reduce count by the size of the clip
        neg r0                  ;make it +ve
        addq #1,count1          ;(never zero)
        shlq #16,r0             ;make it 16:16
        move xinc1,r1
        move iinc1,r31
        fmult r1,r0
        fmult r31,r0            ;calculate total increment to clip line
        add r1,sum1
        add r31,sum2
        move xinc2,r1
        move iinc2,r31
        fmult r1,r0
        fmult r31,r0
        add r1,sum3
        add r31,sum4            ;now, offsets are OK and the poly is shortened
        moveq #0,y1_n           ;(it starts at top of screen)
tri1on: movei #279,r0
        movei #zkk,r31
        cmp r0,y1_n             ;check for right off bottom edge
        jump pl,(r31)           ;next poly if it was
        nop
        movei #tri1bot,r1
        cmp r0,y2_n             ;check for this subtri split
        jump mi,(r1)            ;not split, jump around
        nop
        move y2_n,r1
        sub r0,r1               ;get amount of overhang
        sub r1,count1           ;shorten poly by that amount
        jump mi,(r31)
        nop
        jump eq,(r31)           ;ensure -ve or 0 length never happens
        nop

tri1bot: shlq #16,y1_n          ;y1_n to blitter format


i_loop1:

;****   Blit a line of poly

        move sum1,xstart
        move sum2,istart
        move sum3,xsize
        move sum4,isize

        cmp sum1,sum3
        jr pl,i_nswap4          ;no NOP as first swap macro instruction iz harmless
        swap xstart,xsize
        swap istart,isize       ;make sure increasing x from xstart
i_nswap4: sub xstart,xsize
        sub istart,isize        ;calc delta X and delta I

        sharq #16,xstart                ;make these
        shrq #16,xsize          ;back to integer
        addq #1,xsize

        sdiv xsize,isize        ;Get iinc per pixel

        waitblit
        movei #B_PATD,r1
        store count3,(r1)       ;count3 used to hold colour
        addq #4,r1
        store count3,(r1)               ;colour is set in the pattern register



        movei #(PITCH1|PIXEL16|WID384|XADDPHR),r1       ;default-settings for Phrase Mode
        move xsize,r0
        shrq #4,r0              ;Check for short lines where phrase mode don't work...
        jr eq,i_setpix
        nop
        movei #i_gophrase,r0
        jump (r0)
        nop
i_setpix:       bset #16,r1             ;this sets pixel mode, if xsize is <32
        movei #B_I3,r0
        store istart,(r0)
        movei #i_pixmode,r0
        store r1,(n_a1+_flags)  ;flags to pixelmode
        jump (r0)
        nop

i_gophrase: store r1,(n_a1+_flags)      ;flags to phrasemode
        moveta istart,r0                ;\\\was istart
        move xstart,r0
        moveq #$03,r31
        and r31,r0              ;r2 is 0-3 according to which pixel xstart is within 1 phrase
i_alignr: cmpq #0,r0            ;align i-gradient to position in the phrase
        jr eq,i_aligned
        nop
        sub isize,istart
        subq #1,r0
        jr i_alignr
        nop

i_aligned: move istart,r0               ;check for initial overflow
        shrq #24,r0
        jr eq,i_all_ok
        nop
        movei #i_setpix,r0      ;set pixelmode if true
        movefa r0,istart
        jump (r0)
        nop
i_all_ok:       move isize,r1
        shlq #2,isize
        movei #B_I0,r0
        store istart,(r0)
        add r1,istart
        subq #4,r0
        store istart,(r0)
        add r1,istart
        subq #4,r0
        store istart,(r0)
        add r1,istart
        subq #4,r0
        store istart,(r0)       ;set the intensities for the first 4 pixels

i_pixmode: movei #B_IINC,r0
        movei #$ffffff,r1
        and r1,isize            ;make it 24 bit signed

        store isize,(r0)        ;set the intensity-increment

        movei #skip1,r1
        cmpq #0,y1_n
        jump mi,(r1)
        nop

        movei #$ffff,r1
        and r1,xstart
        or y1_n,xstart          ;form a pixel address
        store xstart,(n_a1+_pixel)


        bset #16,xsize          ;xsize can now be used to set the blitter's count
        
        movei #B_COUNT,r0
        store xsize,(r0)        ;set the count

        store cmd,(blit)                ;Blit away

;****   Poly line blit end


skip1:  movei #$10000,r0
        add r0,y1_n             ;step to nxt scanline
        add xinc1,sum1
        add iinc1,sum2
        add xinc2,sum3
        subq #1,count1
        jump ne,(loop1)
        add iinc2,sum4          ;move to next values

setp2:
;       movei #zkk,r0
;       jump (r0)
;       nop


        move x3_n,xinc1
        move i3_n,iinc1         ;new target point is x3_n/i3_n
        sub x2_n,xinc1
        sub i2_n,iinc1          ;get differences
        shlq #16,xinc1

        sdiv count2,xinc1
        sdiv count2,iinc1       ;new increments

        movei #tri2on,r0
        cmpq #0,y2_n            ;Check for poly split by screen top
        jump pl,(r0)            ;Not split if y2_n positive
        nop
        move y2_n,r0            ;get amount of clip lines
        add y2_n,count2         ;reduce count by the size of the clip
        neg r0                  ;make it +ve
        addq #1,count2          ;(never zero)
        shlq #16,r0             ;make it 16:16
        move xinc1,r1
        move iinc1,r31
        fmult r1,r0
        fmult r31,r0            ;calculate total increment to clip line
        add r1,sum1
        add r31,sum2
        move xinc2,r1
        move iinc2,r31
        fmult r1,r0
        fmult r31,r0
        add r1,sum3
        add r31,sum4            ;now, offsets are OK and the poly is shortened
        

tri2on: movei #279,r0
        movei #zkk,r31
        cmp r0,y2_n             ;check for right off bottom edge
        jump pl,(r31)           ;next poly if it was
        nop
        movei #tri2bot,r1
        cmp r0,y3_n             ;check for this subtri split
        jump mi,(r1)            ;not split, jump around
        nop
        move y3_n,r1
        sub r0,r1               ;get amount of overhang
        sub r1,count2           ;shorten poly by that amount
        jump mi,(r31)
        nop
        jump eq,(r31)           ;ensure -ve or 0 length never happens
        nop

tri2bot:

i_loop2:

;****   Blit a line of poly

        move sum1,xstart
        move sum2,istart
        move sum3,xsize
        move sum4,isize

        cmp sum1,sum3
        jr pl,n3swap4           ;no NOP as first swap macro instruction iz harmless
        swap xstart,xsize
        swap istart,isize       ;make sure increasing x from xstart
n3swap4:        sub xstart,xsize
        sub istart,isize        ;calc delta X and delta I

        sharq #16,xstart                ;make these
        shrq #16,xsize          ;back to integer
        addq #1,xsize

        sdiv xsize,isize        ;Get iinc per pixel

        waitblit
        movei #B_PATD,r1
        store count3,(r1)       ;count3 used to hold colour
        addq #4,r1
        store count3,(r1)               ;colour is set in the pattern register



        movei #(PITCH1|PIXEL16|WID384|XADDPHR),r1       ;default-settings for Phrase Mode
        move xsize,r0
        shrq #4,r0              ;Check for short lines where phrase mode don't work...
        jr eq,s3etpix
        nop
        movei #g3ophrase,r0
        jump (r0)
        nop
s3etpix: bset #16,r1            ;this sets pixel mode, if xsize is <32
        movei #B_I3,r0
        store istart,(r0)
        movei #p3ixmode,r0
        store r1,(n_a1+_flags)  ;flags to pixelmode
;       move isize,r1
        jump (r0)
        nop

g3ophrase: store r1,(n_a1+_flags)       ;flags to phrasemode
        moveta istart,r0                ;\\\was istart
        move xstart,r0
        movei #$03,r31
        and r31,r0              ;r2 is 0-3 according to which pixel xstart is within 1 phrase
a3ligner: cmpq #0,r0            ;align i-gradient to position in the phrase
        jr eq,a3ligned
        nop
        sub isize,istart
        subq #1,r0
        jr a3ligner
        nop

a3ligned: move istart,r0                ;check for initial overflow
        shrq #24,r0
        jr eq,a3ll_ok
        nop
        movei #s3etpix,r0       ;set pixelmode if true
        movefa r0,istart
        jump (r0)
        nop
a3ll_ok:
        move isize,r1
        shlq #2,isize
        movei #B_I0,r0
        store istart,(r0)
        add r1,istart
        subq #4,r0
        store istart,(r0)
        add r1,istart
        subq #4,r0
        store istart,(r0)
        add r1,istart
        subq #4,r0
        store istart,(r0)       ;set the intensities for the first 4 pixels

p3ixmode:
        movei #B_IINC,r0
        movei #$ffffff,r1
        and r1,isize            ;make it 24 bit signed

        store isize,(r0)        ;set the intensity-increment

        movei #skip2,r1
        cmpq #0,y1_n
        jump mi,(r1)
        nop

        movei #$ffff,r1
        and r1,xstart
        or y1_n,xstart          ;form a pixel address
        store xstart,(n_a1+_pixel)


        bset #16,xsize          ;xsize can now be used to set the blitter's count
        movei #B_COUNT,r0
        store xsize,(r0)        ;set the count

        store cmd,(blit)                ;Blit away

;****   Poly line blit end

skip2:  movei #$10000,r0
        add r0,y1_n             ;step to nxt scanline
        add xinc1,sum1
        add iinc1,sum2
        add xinc2,sum3
        subq #1,count2
        jump ne,(loop2)
        add iinc2,sum4          ;move to next values

;*******
;******* polyrenderer code end
;*******


zkk:    bank1

        frts


; *******************************************************************
; starplane
;
; draw a single plane of random field; inputs Nstars,Col,Xdisp,Ydisp,Rseed
; *******************************************************************
starplane:

        nstars          REGEQU r4
        starcol         REGEQU r5
        xdisp           REGEQU r6
        ydisp           REGEQU r7
        xseed           REGEQU r8
        xmask           REGEQU r9
        linesize        REGEQU r10
        andlim          REGEQU r11
        himask          REGEQU r12
        lomask          REGEQU r13
        scrbase         REGEQU r14
        maxx            REGEQU r15
        maxy            REGEQU r16
        px              REGEQU r17
        py              REGEQU r18
        nopixl          REGEQU r19
        starloop        REGEQU r20
        yseed           REGEQU r21
        ymask           REGEQU r22

        MACRO ran                       ;Sequence generator out of Graphics Gems        
        btst #0,\1
        jr z,\~noxortt
        shrq #1,\1              ;branch optimisation - the SHRQ is always done
        xor \2,\1
\~noxortt: nop
        ENDM

        movei #in_buf,r0
        load (r0),nstars
        addq #4,r0
        load (r0),starcol
        addq #4,r0
        load (r0),xdisp
        addq #4,r0
        load (r0),ydisp
        addq #4,r0
        load (r0),xseed         ;get parameters
        addq #4,r0
        load (r0),yseed

        movei #gpu_screen,r0
        load (r0),scrbase
        movei #768,linesize
        movei #$ff,lomask
        movei #384,maxx
        movei #280,maxy
        movei #no_pixl,nopixl
        movei #star_loop,starloop
        movei #$110,xmask       ;init constants
        movei #$b8,ymask
        movei #$1ff,andlim

                
star_loop: ran xseed,xmask
        move xseed,px
        ran yseed,ymask
        move yseed,py           ;"random" XY star position
        add xdisp,px
        add ydisp,py            ;add XY offset passed in
        and andlim,px           
        and andlim,py           ;wrap to 0-255
        cmp maxx,px
        jump pl,(nopixl)        ;clip max X
        cmp maxy,py             ;no harm if this is done whatever
        jump pl,(nopixl)
        shlq #1,px              ;x to point at words
        mult linesize,py        ;offset in lines to bytes
        add px,py
        add scrbase,py          ;py now points at pixel
        storew starcol,(py)     ;plot the star
no_pixl: subq #1,nstars
        jump ne,(starloop)      ;loop until nstars is 0
        nop
        movei #StopGPU,r0
        jump (r0)
        nop



